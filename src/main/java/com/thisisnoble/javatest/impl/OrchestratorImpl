public class OrchestratorImpl implements Event{
 private BlockingQueue<Event> queue;
 private BlockingQueue<Event> publisherqueue;
 private ArrayList<Processor> processors;

public OrchestratorImpl(){
queue= new ArrayBlockingQueue<Event>(20);
processors=new ArrayList<Processor>();
publisherqueue=new ArrayLArrayBlockingQueueist<Event>(20);
}



 void register(Processor processor){
 
         Syncronized(processors){
              try{
            Thread.sleep(100);
            processors.add(processor);
            
            }catch(InterruptedException e){
            e.printStackTrace();
            }
            }
 
 }
void processEvents(){
  while(true){
  Event event =queue.take();
  for( Processor p : processors){
   if (p.isInterested(event){
      process(event);
      publisherqueue.put(event);
   }


}

}
 void receive(Event event){
        try{
            Thread.sleep(10);
            queue.put(event);
            }catch(InterruptedException e){
            e.printStackTrace();
            }
}
    

 void setup(Publisher publisher){
    Event event;
    while(event=publisherqueue.take()){
    try{
    Thread.sleep(10);
     publish(event);
    }catch(InterruptedException e){
    e.printStackTrace();
    }
    }
    
 }




}
